package firstproject.service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import firstproject.controller.Controller;
import firstproject.dao.MemberDAO;
import firstproject.dao.SelectDAO;
import firstproject.util.EnterUtil;
import firstproject.util.NullCheckUtil;
import firstproject.util.ScanUtil;
import firstproject.util.View;

public class MenuService {

	private static MenuService instance = null;

	private MenuService() {
	}

	public static MenuService getInstance() {
		if (instance == null)
			instance = new MenuService();
		return instance;
	}

	MemberDAO memberDAO = MemberDAO.getInstance();
	SelectDAO selectDAO = SelectDAO.getInstance();

	private String storeName;
	private List<String> menuNames = new ArrayList<>();
//   private String menuName;
//   private int remainqty;
//   private int quantity;
//   private int menuprice;
	private int resultprices;
	private int minTotalPrice;
	String orderCode = "";
	String formatedNow2 = "";
	String menucode = "";
	int quantity;
	int orderEta;

	private List<Map<String, Object>> orderList = new ArrayList<Map<String, Object>>();
	private List<Map<String, Object>> orderListInsert = new ArrayList<Map<String, Object>>();
	Map<String, Object> list = new HashMap<String, Object>();
	Map<String, Object> listInsert = new HashMap<String, Object>();

//	private List<Map<String, Object>> orderList = null;
//	private List<Map<String, Object>> orderListInsert = null;
//	Map<String, Object> list = null;
//	Map<String, Object> listInsert = null;

	public int storeInfo() {

		System.out.println();
		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println("     [ 음식점 선택 ]");
		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println("  ** 음식점 이름을 정확히 입력해주세요 **");
		System.out.print("   음식점 이름 입력  >> ");
		storeName = ScanUtil.nextLine();

		List<Map<String, Object>> menuList = selectDAO.getMenuList(storeName);

		if (menuList == null || menuList.isEmpty()) {
			System.out.println(" ※ 해당 음식점에 대한 메뉴 정보가 없습니다.");
			return View.MENU;
		}

		minTotalPrice = menuList.get(0).get("MINORDER") != null
				? Integer.parseInt(String.valueOf(menuList.get(0).get("MINORDER")))
				: 0;

		boolean storeFound = false;

		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println(" [" + storeName + "]       * 최소주문금액: " + minTotalPrice + "에 맞게 담아주세요");
		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println(" 메뉴 이름\t\t메뉴 가격\t\t잔여 수량");

		for (Map<String, Object> menu : menuList) {
			if (menu.get("STONM").equals(storeName)) {
				storeFound = true;
				System.out.print(" " + menu.get("MENUNM"));
				System.out.print("\t\t" + menu.get("MENUPRICE") + "원");
				System.out.print("\t\t" + menu.get("REMAINQTY") + "개");
				System.out.println();
			} else {
				System.out.println(" ※ 잘못된 접근입니다. 다시 입력해주세요.");
			}
		}

		// 1. 가게 선택 > 그 가게의 대전시 구별 코드를 가져온다. substring써서
		String storeGu = menuList.get(0).get("STOCODE").toString();
		storeGu = storeGu.substring(0, 2); // 가게 기준 대전시 구분 코드.

		orderCode += storeGu;
		LocalDate now = LocalDate.now();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyMMdd"); // 포맷 정의
		String formatedNow = now.format(formatter); // 포맷 적용
		// System.out.println(formatedNow); // 결과 출력 : 210617/
		orderCode += formatedNow;
		// System.out.println("orderCode : " + orderCode);

		DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yy/MM/dd"); // 포맷 정의
		formatedNow2 = now.format(formatter2); // 포맷 적용
		// System.out.println(formatedNow2);

		orderCode += "%";
		List<Object> odStr = new ArrayList<>();
		odStr.add(orderCode);
		List<Map<String, Object>> searchOrderCode = memberDAO.searchOrderCode(odStr);
		if (NullCheckUtil.isEmpty(searchOrderCode)) {
			orderCode += "0001";
			orderCode = orderCode.replace("%", "");
		} else {
			orderCode += searchOrderCode.get(0).get("ORDERCODE").toString();
			orderCode = orderCode.replace("%", "");
		}

		Controller.sessionStorage.put("ordercode", null);
		Controller.sessionStorage.put("ordercode", orderCode);

		// 2. 사용자 정보 중에 MEMADD 쿼리를 써서 대전시 구 정보를 가져와야 한다. (O)
		Object obj = Controller.sessionStorage.get("loginInfo");
		Map<String, Object> loginInfo = (Map<String, Object>) obj;
		String memAdd = loginInfo.get("MEMADD").toString();
		String[] addArray = memAdd.split(" ");

		memAdd = addArray[1]; // 사용자 기준 대전시 구만 나온거
		Controller.sessionStorage.put("memAdd", memAdd);

		if (memAdd.equals("대덕구")) {
			memAdd = "AG";
		} else if (memAdd.equals("동구")) {
			memAdd = "DG";
		} else if (memAdd.equals("서구")) {
			memAdd = "SG";
		} else if (memAdd.equals("유성구")) {
			memAdd = "YG";
		} else if (memAdd.equals("중구")) {
			memAdd = "JG";
		}

		orderEta = 0;
		if (memAdd.equals(storeGu)) {
			orderEta = 15;
		} else {
			if (memAdd.equals("AG") && (storeGu.equals("YG") || storeGu.equals("DG"))) {
				orderEta = 30;
			} else if (memAdd.equals("YG") && (storeGu.equals("AG") || storeGu.equals("SG"))) {
				orderEta = 30;
			} else if (memAdd.equals("SG") && (storeGu.equals("YG") || storeGu.equals("JG"))) {
				orderEta = 30;
			} else if (memAdd.equals("JG") && (storeGu.equals("SG") || storeGu.equals("DG"))) {
				orderEta = 30;
			} else if (memAdd.equals("DG") && (storeGu.equals("JG") || storeGu.equals("AG"))) {
				orderEta = 30;
			} else if (memAdd.equals("AG") && (storeGu.equals("SG") || storeGu.equals("JG"))) {
				orderEta = 45;
			} else if (memAdd.equals("YG") && (storeGu.equals("JG") || storeGu.equals("DG"))) {
				orderEta = 45;
			} else if (memAdd.equals("SG") && (storeGu.equals("AG") || storeGu.equals("DG"))) {
				orderEta = 45;
			} else if (memAdd.equals("JG") && (storeGu.equals("YG") || storeGu.equals("AG"))) {
				orderEta = 45;
			} else if (memAdd.equals("DG") && (storeGu.equals("YG") || storeGu.equals("SG"))) {
				orderEta = 45;
			}
		}

		Controller.sessionStorage.put("ordereta", orderEta);
		// System.out.println(Controller.sessionStorage.toString());

		if (storeFound) {
			return View.MENU_DETAIL;
		} else {
			return View.MENU;
		}

	}

	public int menuInfo() {
		Object obj = Controller.sessionStorage.get("loginInfo");
		Map<String, Object> userInfo = (Map<String, Object>) obj;
		String userID = (String) userInfo.get("MEMID");

		System.out.println();
		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println("   1. 메뉴선택   2. 장바구니(결제화면)");
		System.out.println(" ───────────────────────────────────────────────────");
		System.out.print("   번호입력 >> ");
		int se = ScanUtil.nextInt();

		while (true) {
			switch (se) {
			case 1:
				list = new HashMap<String, Object>();
				listInsert = new HashMap<String, Object>();
				System.out.println(" ───────────────────────────────────────────────────");
				System.out.println(" ** 메뉴 이름을 정확히 입력해주세요 **");

				System.out.print("   메뉴 선택 >> ");
				String menuName = ScanUtil.nextLine();

				int quantity = 0;

				while (true) {
					System.out.print("   수량 입력 >> ");
					String quantityStr = ScanUtil.nextLine();

					if (quantityStr.matches("^[0-9]*$") && quantityStr != null) {
						quantity = Integer.parseInt(quantityStr);
						break;
					} else {
						System.out.println(" ※ 잘못된 입력입니다. 숫자로 입력해주세요.");
					}
				}

				Map<String, Object> menudetailList = selectDAO.getMenuDetailList(menuName, storeName);

				if (menudetailList != null && !menudetailList.isEmpty()) {
					System.out.println();

					if (menudetailList.get("MENUNM").equals(menuName)) {
						BigDecimal remainQtyBigDecimal = (BigDecimal) menudetailList.get("REMAINQTY");
						int remainqty = remainQtyBigDecimal.intValue();

						BigDecimal menupriceBigDecimal = (BigDecimal) menudetailList.get("MENUPRICE");
						int menuprice = menupriceBigDecimal.intValue();

						if (remainQtyBigDecimal != null) {
							if (remainQtyBigDecimal.compareTo(BigDecimal.valueOf(quantity)) >= 0) {
								int sumprice = menuprice * quantity;
								resultprices += sumprice;
								menucode = menudetailList.get("MENUCODE").toString();
								// System.out.println(formatedNow2);
								list.put("menuName", menuName);
								list.put("remainQty", remainqty);
								list.put("orderQty", quantity);
								list.put("storeName", storeName);
								list.put("menuPrice", menuprice);
								list.put("sumPrice", sumprice);
//								orderList = new ArrayList<Map<String, Object>>();
								orderList.add(list);

								listInsert.put("orderCode", orderCode);
								listInsert.put("userID", userID);
								listInsert.put("menuCode", menucode);
								listInsert.put("orderQty", quantity);
								listInsert.put("sysdate", formatedNow2);
								listInsert.put("orderEta", orderEta);
//								orderListInsert = new ArrayList<Map<String, Object>>();
								orderListInsert.add(listInsert);
							} else {
								System.out.println(" 품절된 메뉴입니다.");
								System.out.println("   1. 메뉴선택으로 돌아가기  2. 배달포장선택으로 돌아가기");
								int rechoice = ScanUtil.nextInt();
								if (rechoice == 2) {
									return View.ORDER_HOME;
								}
							}
						}
						System.out.println(" 총 결제 금액: " + resultprices);
					}
				} else {
					System.out.println(" ※ 해당 메뉴에 대한 메뉴 정보가 없습니다. 다시 입력해주세요.");
					System.out.println();
				}
				break;

			case 2:
				if (resultprices == 0) {
					System.out.println("  ** 장바구니가 비었습니다. 배달/포장 선택화면으로 돌아갑니다. **");
					System.out.println();
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.ORDER_HOME;
				} else {
					return View.CART;
				}

			default:
				System.out.println(" ※ 잘못입력하셨습니다. 다시 입력해주세요.");
				return View.MENU_DETAIL;
			}

			while (true) {
				System.out.println(" ───────────────────────────────────────────────────");
				System.out.println("  * 메뉴를 추가하시겠습니까?");
				System.out.println("   1. 메뉴추가      2. 결제화면으로 이동");
				System.out.print("  숫자입력 >> ");
				int as = ScanUtil.nextInt();

				if (as == 1) {
					break;
				} else if (as == 2) {
					if (minTotalPrice > resultprices) { // 최소주문금액 >= 총주문금액
						System.out.println(" ※ 담으신 총 금액이 최소 주문금액보다 적습니다.");
						System.out.println(" ※ 조금 더 담아주세요 ^^");
						break;
					} else {
						System.out.println(" 감사합니다. 엔터(Enter)를 누르시면 장바구니로 이동합니다.");
						EnterUtil.enterNext(2);
						return View.CART;
					}
				} else {
					System.out.println(" ※ 잘못된 접근입니다. 다시 입력하세요");
					return View.MENU_DETAIL;
				}
			}
		}
	}

	long resultbalance = 0;

	public int cartInfo() {
//		  System.out.println(Controller.sessionStorage.toString());
		List<Object> param1 = new ArrayList<>();
		List<Object> param2 = new ArrayList<>();

		// 사용자의 정보 중 잔고정보 가져오기
		Object obj = Controller.sessionStorage.get("loginInfo");
		Map<String, Object> userInfo = (Map<String, Object>) obj;
		String userID = (String) userInfo.get("MEMID");

		Map<String, Object> balanceOne = selectDAO.BalanceOne(userID);
		BigDecimal balanceBigDecimal = (BigDecimal) balanceOne.get("BALANCE");

		long balance = balanceBigDecimal.longValue();

		if (Controller.sessionStorage.get("deliOrTake").toString() == "deliYN") {
//			  System.out.println("배달 화면");
			System.out.println(" ───────────────────────────────────────────────────");
			System.out.println("     [ 장바구니 ]");
			System.out.println(" ───────────────────────────────────────────────────");
			System.out.println("     * 담은 메뉴리스트 *");
			System.out.println("  메뉴명\t\t수량\t\t단가\t\t메뉴총금액");
			for (int j = 0; j < orderList.size(); j++) {
				System.out.println("  " + (String) orderList.get(j).get("menuName") + "\t\t"
						+ (int) orderList.get(j).get("orderQty") + "개" + "\t\t"
						+ (int) orderList.get(j).get("menuPrice") + "원" + "\t\t"
						+ ((int) orderList.get(j).get("orderQty")) * ((int) orderList.get(j).get("menuPrice")) + "원");
			}
			List<Map<String, Object>> menuList = selectDAO.getMenuList(storeName);
			String storeCode = menuList.get(0).get("STOCODE").toString();
			Map<String, Object> deliCost = selectDAO.getRiderDeliCost(storeCode);
			BigDecimal deliCostBigDecimal = (BigDecimal) deliCost.get("DELICOST");
			int delicost = deliCostBigDecimal.intValue();
			System.out.println("  -----------------------------------");
			System.out.println("   배달비 = " + deliCost.get("DELICOST").toString() + "원");
			System.out.println("  -----------------------------------");
			resultprices += delicost;
			System.out.println("   결제 총금액 = " + resultprices + "원");
			System.out.println("  -----------------------------------");
			System.out.println("   사용 가능한 잔액 : " + balance + "원");
			System.out.println("  -----------------------------------");
			System.out.println("   1. 최종결제");
			System.out.println("   2. 포인트충전하기");
			System.out.println("   3. 메뉴 처음부터 다시 담기");
			System.out.println("   4. 식당 처음부터 다시 고르기");
			System.out.println("   9. 로그아웃");
			System.out.println("  -----------------------------------");
			System.out.print("  번호입력 >> ");

			while (true) {
				switch (ScanUtil.nextInt()) {
				case 1:
					if (balance >= resultprices) {
						// 돈이 총결제금액에 충분
						// 화면전환 => 최종최종결제화면(주문완료확인, 잔고, ...)
						resultbalance = balance - resultprices;

						List<Object> param = new ArrayList<>();
						param.add(resultbalance);
						param.add(userID);
						selectDAO.getPriceUpdate(param);

						for (int j = 0; j < orderList.size(); j++) {
							param1 = new ArrayList<>();
							int resultqty = (int) orderList.get(j).get("remainQty")
									- (int) orderList.get(j).get("orderQty");
							param1.add(resultqty);
							param1.add((String) orderList.get(j).get("menuName"));
							param1.add((String) orderList.get(j).get("storeName"));
							selectDAO.getRemainUpdate(param1);
						}

//		               System.out.println("deliOrTake : " + Controller.sessionStorage.get("deliOrTake"));
						for (int k = 0; k < orderListInsert.size(); k++) {
							param2 = new ArrayList<>();
							param2.add((String) orderListInsert.get(k).get("orderCode"));
							param2.add((String) orderListInsert.get(k).get("userID"));
							param2.add((String) orderListInsert.get(k).get("menuCode"));
							param2.add((int) orderListInsert.get(k).get("orderQty"));
							param2.add((String) orderListInsert.get(k).get("sysdate"));
							param2.add((int) orderListInsert.get(k).get("orderEta"));
							param2.add(Controller.sessionStorage.get("deliOrTake"));
							selectDAO.getOrderHistoInsert(param2);
						}

						System.out.println(" ** 결제가 완료되었습니다 **");
						System.out.println(" 엔터를 누르면 주문완료페이지로 갑니다.");
						orderCode = "";
						EnterUtil.enterNext(2);
						return View.RECEIPT;
					} else {
						System.out.println(" ※ 잔액이 부족합니다.");
						while (true) {
							System.out.println(" 1. 포인트 충전하기   2. 취소(장바구니화면으로 넘어감)");
							System.out.println("  번호입력 >> ");
							switch (ScanUtil.nextInt()) {
							case 1:
								return View.POINT;
							case 2:
								return View.CART;
							default:
								System.out.println(" ※ 잘못된 접근입니다. 다시입력하세요");
								break;
							}
						}
					}

				case 2:
					return View.POINT;
				case 3:
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.MENU_DETAIL;
				case 4:
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.MENU;
				case 9:
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.ORDER_LOGOUT;
				}
			}
		} else if (Controller.sessionStorage.get("deliOrTake").toString() == "takeYN") {

			System.out.println(" ───────────────────────────────────────────────────");
			System.out.println("     [ 장바구니 ]");
			System.out.println(" ───────────────────────────────────────────────────");
			System.out.println("     * 담은 메뉴리스트 *");
			System.out.println("  메뉴명\t\t수량\t\t단가\t\t메뉴총금액");
			for (int j = 0; j < orderList.size(); j++) {
				System.out.println("  " + (String) orderList.get(j).get("menuName") + "\t\t"
						+ (int) orderList.get(j).get("orderQty") + "개" + "\t\t"
						+ (int) orderList.get(j).get("menuPrice") + "원" + "\t\t"
						+ ((int) orderList.get(j).get("orderQty")) * ((int) orderList.get(j).get("menuPrice")) + "원");
			}
			System.out.println("  -----------------------------------");
			System.out.println("   결제 총금액 = " + resultprices + "원");
			System.out.println("  -----------------------------------");
			System.out.println("   사용 가능한 잔액 : " + balance + "원");
			System.out.println("  -----------------------------------");
			System.out.println("   1. 최종결제");
			System.out.println("   2. 포인트충전하기");
			System.out.println("   3. 메뉴 처음부터 다시 담기");
			System.out.println("   4. 식당 처음부터 다시 고르기");
			System.out.println("   9. 로그아웃");
			System.out.println("  -----------------------------------");
			System.out.print("  번호입력 >> ");

			while (true) {
				switch (ScanUtil.nextInt()) {
				case 1:
					if (balance >= resultprices) {
						// 돈이 총결제금액에 충분
						// 화면전환 => 최종최종결제화면(주문완료확인, 잔고, ...)
						resultbalance = balance - resultprices;

						List<Object> param = new ArrayList<>();
						param.add(resultbalance);
						param.add(userID);
						selectDAO.getPriceUpdate(param);

						for (int j = 0; j < orderList.size(); j++) {
							param1 = new ArrayList<>();
							int resultqty = (int) orderList.get(j).get("remainQty")
									- (int) orderList.get(j).get("orderQty");
							param1.add(resultqty);
							param1.add((String) orderList.get(j).get("menuName"));
							param1.add((String) orderList.get(j).get("storeName"));
							selectDAO.getRemainUpdate(param1);
						}

//		               System.out.println("deliOrTake : " + Controller.sessionStorage.get("deliOrTake"));
						for (int k = 0; k < orderListInsert.size(); k++) {
							param2 = new ArrayList<>();
							param2.add((String) orderListInsert.get(k).get("orderCode"));
							param2.add((String) orderListInsert.get(k).get("userID"));
							param2.add((String) orderListInsert.get(k).get("menuCode"));
							param2.add((int) orderListInsert.get(k).get("orderQty"));
							param2.add((String) orderListInsert.get(k).get("sysdate"));
							param2.add((int) orderListInsert.get(k).get("orderEta"));
							param2.add(Controller.sessionStorage.get("deliOrTake"));
							selectDAO.getOrderHistoInsert(param2);
						}

						System.out.println(" ** 결제가 완료되었습니다 **");
						System.out.println(" 엔터를 누르면 주문완료페이지로 갑니다.");
						orderCode = "";
						EnterUtil.enterNext(2);
						return View.RECEIPT;
					} else {
						System.out.println(" ※ 잔액이 부족합니다.");
						while (true) {
							System.out.println(" 1. 포인트 충전하기   2. 취소(장바구니화면으로 넘어감)");
							System.out.println("  번호입력 >> ");
							switch (ScanUtil.nextInt()) {
							case 1:
								return View.POINT;
							case 2:
								return View.CART;
							default:
								System.out.println(" ※ 잘못된 접근입니다. 다시입력하세요");
								break;
							}
						}
					}

				case 2:
					return View.POINT;
				case 3:
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.MENU_DETAIL;
				case 4:
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.MENU;
				case 9:
					orderList = new ArrayList<Map<String, Object>>();
					resultprices = 0;
					orderListInsert = new ArrayList<Map<String, Object>>();
					orderCode = "";
					return View.ORDER_LOGOUT;
				}
			}
		}
		return 0;
	}

	// 마지막화면: 영수증처럼 주문확인과 정보가 뜸
	public int receipt() {

		Object obj = Controller.sessionStorage.get("loginInfo");
		Map<String, Object> userInfo = (Map<String, Object>) obj;
		String userID = (String) userInfo.get("MEMID");

		List<Map<String, Object>> orderMap = memberDAO.orderCode(userID);
		String orderCode = orderMap.get(0).get("ORDERCODE").toString();

		List<Map<String, Object>> orderMap2 = memberDAO.orderList(userID, orderCode);
		String orderEta = orderMap2.get(0).get("ORDERETA").toString();

		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println("     [ 주문 완료 확인 페이지 ]");
		System.out.println(" ───────────────────────────────────────────────────");
		System.out.println(" 주문번호 : " + orderCode);
		System.out.println("  -----------------------------------");
		System.out.println(" " + orderEta + " 후 주문 도착 예정입니다 ~ !");
		System.out.println("  -----------------------------------");
		System.out.println(" 주문음식점명\t\t주문메뉴\t\t주문수량\t메뉴가격");
		for (Map<String, Object> orderInfo : orderMap2) {
			BigDecimal totalPriceBigDecimal = (BigDecimal) orderInfo.get("TOTALPRICE");
			int totalPrice = totalPriceBigDecimal.intValue();
			System.out.println("  ▶" + orderInfo.get("STONM").toString() + "\t\t" + orderInfo.get("MENUNM").toString()
					+ "\t\t" + orderInfo.get("ORDERQTY").toString() + "\t" + totalPrice + "원");
		}
		if (Controller.sessionStorage.get("deliOrTake").toString() == "deliYN") {
			List<Map<String, Object>> menuList = selectDAO.getMenuList(storeName);
			String storeCode = menuList.get(0).get("STOCODE").toString();
			Map<String, Object> deliCost = selectDAO.getRiderDeliCost(storeCode);
			System.out.println("  -----------------------------------");
			System.out.println("   배달비 = " + deliCost.get("DELICOST").toString() + "원");
		}
		System.out.println("  -----------------------------------");
		System.out.println(" 총 결제금액 :           " + resultprices + "원");
		System.out.println(" 남은 포인트 :           " + resultbalance + "원");
		System.out.println(" ───────────────────────────────────────────────────");
		orderList = new ArrayList<Map<String, Object>>();
		resultprices = 0;
		orderListInsert = new ArrayList<Map<String, Object>>();

		while (true) {
			System.out.println(" 1. 추가주문하기          2. 로그아웃하기         3.프로그램종료하기");
			System.out.print("입력 >> ");
			switch (ScanUtil.nextInt()) {
			case 1:
				return View.ORDER_HOME;
			case 2:
				return View.ORDER_LOGOUT;
			case 3:
				return View.SYSTEM_EXIT;
			default:
				System.out.println(" ※ 잘못된 접근입니다. 다시입력하세요");
			}
		}
	}

}